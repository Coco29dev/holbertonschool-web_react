/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/*!********************!*\
  !*** ./js/main.ts ***!
  \********************/

;
var student1 = {
    firstName: "Jojo",
    lastName: "Jiji",
    age: 20,
    location: "Vesoul"
};
var student2 = {
    firstName: "Roro",
    lastName: "Riri",
    age: 26,
    location: "Arcachon"
};
var studentsList = [student1, student2];
function renderTable() {
    // Create table element
    var table = document.createElement('table');
    // Add some basic styling
    table.style.borderCollapse = 'collapse';
    table.style.width = '100%';
    table.style.marginTop = '20px';
    // Create table header
    var thead = document.createElement('thead');
    var headerRow = document.createElement('tr');
    var firstNameHeader = document.createElement('th');
    firstNameHeader.textContent = 'First Name';
    firstNameHeader.style.border = '1px solid #ddd';
    firstNameHeader.style.padding = '8px';
    firstNameHeader.style.backgroundColor = '#f2f2f2';
    var locationHeader = document.createElement('th');
    locationHeader.textContent = 'Location';
    locationHeader.style.border = '1px solid #ddd';
    locationHeader.style.padding = '8px';
    locationHeader.style.backgroundColor = '#f2f2f2';
    headerRow.appendChild(firstNameHeader);
    headerRow.appendChild(locationHeader);
    thead.appendChild(headerRow);
    table.appendChild(thead);
    // Create table body
    var tbody = document.createElement('tbody');
    // Iterate through students and create rows
    studentsList.forEach(function (student) {
        var row = document.createElement('tr');
        var firstNameCell = document.createElement('td');
        firstNameCell.textContent = student.firstName;
        firstNameCell.style.border = '1px solid #ddd';
        firstNameCell.style.padding = '8px';
        var locationCell = document.createElement('td');
        locationCell.textContent = student.location;
        locationCell.style.border = '1px solid #ddd';
        locationCell.style.padding = '8px';
        row.appendChild(firstNameCell);
        row.appendChild(locationCell);
        tbody.appendChild(row);
    });
    table.appendChild(tbody);
    // Append table to the document body
    document.body.appendChild(table);
}
// Wait for DOM to be loaded before rendering
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', renderTable);
}
else {
    renderTable();
}

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFRLENBQUM7UUFDNUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsZ0JBQWdCLENBQUM7UUFDN0MsWUFBWSxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO1FBRW5DLEdBQUcsQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDL0IsR0FBRyxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUM5QixLQUFLLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3pCLENBQUMsQ0FBQyxDQUFDO0lBRUgsS0FBSyxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUV6QixvQ0FBb0M7SUFDcEMsUUFBUSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDbkMsQ0FBQztBQUVELDZDQUE2QztBQUM3QyxJQUFJLFFBQVEsQ0FBQyxVQUFVLEtBQUssU0FBUyxFQUFFO0lBQ3JDLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxrQkFBa0IsRUFBRSxXQUFXLENBQUMsQ0FBQztDQUM1RDtLQUFNO0lBQ0wsV0FBVyxFQUFFLENBQUM7Q0FDZiIsInNvdXJjZXMiOlsid2VicGFjazovL3R5cGVzY3JpcHRfZGVwZW5kZW5jaWVzLy4vanMvbWFpbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbnRlcmZhY2UgU3R1ZGVudCB7XG4gIGZpcnN0TmFtZTogc3RyaW5nLFxuICBsYXN0TmFtZTogc3RyaW5nLFxuICBhZ2U6IG51bWJlcixcbiAgbG9jYXRpb246IHN0cmluZ1xufTtcblxubGV0IHN0dWRlbnQxOiBTdHVkZW50ID0ge1xuICBmaXJzdE5hbWU6IFwiSm9qb1wiLFxuICBsYXN0TmFtZTogXCJKaWppXCIsXG4gIGFnZTogMjAsXG4gIGxvY2F0aW9uOiBcIlZlc291bFwiXG59O1xuXG5cbmxldCBzdHVkZW50MjogU3R1ZGVudCA9IHtcbiAgZmlyc3ROYW1lOiBcIlJvcm9cIixcbiAgbGFzdE5hbWU6IFwiUmlyaVwiLFxuICBhZ2U6IDI2LFxuICBsb2NhdGlvbjogXCJBcmNhY2hvblwiXG59O1xuXG5sZXQgc3R1ZGVudHNMaXN0OiBTdHVkZW50W10gPSBbc3R1ZGVudDEsIHN0dWRlbnQyXTtcblxuZnVuY3Rpb24gcmVuZGVyVGFibGUoKTogdm9pZCB7XG4gIC8vIENyZWF0ZSB0YWJsZSBlbGVtZW50XG4gIGNvbnN0IHRhYmxlOiBIVE1MVGFibGVFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGFibGUnKTtcblxuICAvLyBBZGQgc29tZSBiYXNpYyBzdHlsaW5nXG4gIHRhYmxlLnN0eWxlLmJvcmRlckNvbGxhcHNlID0gJ2NvbGxhcHNlJztcbiAgdGFibGUuc3R5bGUud2lkdGggPSAnMTAwJSc7XG4gIHRhYmxlLnN0eWxlLm1hcmdpblRvcCA9ICcyMHB4JztcblxuICAvLyBDcmVhdGUgdGFibGUgaGVhZGVyXG4gIGNvbnN0IHRoZWFkOiBIVE1MVGFibGVTZWN0aW9uRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RoZWFkJyk7XG4gIGNvbnN0IGhlYWRlclJvdzogSFRNTFRhYmxlUm93RWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RyJyk7XG5cbiAgY29uc3QgZmlyc3ROYW1lSGVhZGVyOiBIVE1MVGFibGVDZWxsRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RoJyk7XG4gIGZpcnN0TmFtZUhlYWRlci50ZXh0Q29udGVudCA9ICdGaXJzdCBOYW1lJztcbiAgZmlyc3ROYW1lSGVhZGVyLnN0eWxlLmJvcmRlciA9ICcxcHggc29saWQgI2RkZCc7XG4gIGZpcnN0TmFtZUhlYWRlci5zdHlsZS5wYWRkaW5nID0gJzhweCc7XG4gIGZpcnN0TmFtZUhlYWRlci5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAnI2YyZjJmMic7XG5cbiAgY29uc3QgbG9jYXRpb25IZWFkZXI6IEhUTUxUYWJsZUNlbGxFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGgnKTtcbiAgbG9jYXRpb25IZWFkZXIudGV4dENvbnRlbnQgPSAnTG9jYXRpb24nO1xuICBsb2NhdGlvbkhlYWRlci5zdHlsZS5ib3JkZXIgPSAnMXB4IHNvbGlkICNkZGQnO1xuICBsb2NhdGlvbkhlYWRlci5zdHlsZS5wYWRkaW5nID0gJzhweCc7XG4gIGxvY2F0aW9uSGVhZGVyLnN0eWxlLmJhY2tncm91bmRDb2xvciA9ICcjZjJmMmYyJztcblxuICBoZWFkZXJSb3cuYXBwZW5kQ2hpbGQoZmlyc3ROYW1lSGVhZGVyKTtcbiAgaGVhZGVyUm93LmFwcGVuZENoaWxkKGxvY2F0aW9uSGVhZGVyKTtcbiAgdGhlYWQuYXBwZW5kQ2hpbGQoaGVhZGVyUm93KTtcbiAgdGFibGUuYXBwZW5kQ2hpbGQodGhlYWQpO1xuXG4gIC8vIENyZWF0ZSB0YWJsZSBib2R5XG4gIGNvbnN0IHRib2R5OiBIVE1MVGFibGVTZWN0aW9uRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3Rib2R5Jyk7XG5cbiAgLy8gSXRlcmF0ZSB0aHJvdWdoIHN0dWRlbnRzIGFuZCBjcmVhdGUgcm93c1xuICBzdHVkZW50c0xpc3QuZm9yRWFjaCgoc3R1ZGVudDogU3R1ZGVudCk6IHZvaWQgPT4ge1xuICAgIGNvbnN0IHJvdzogSFRNTFRhYmxlUm93RWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RyJyk7XG5cbiAgICBjb25zdCBmaXJzdE5hbWVDZWxsOiBIVE1MVGFibGVDZWxsRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RkJyk7XG4gICAgZmlyc3ROYW1lQ2VsbC50ZXh0Q29udGVudCA9IHN0dWRlbnQuZmlyc3ROYW1lO1xuICAgIGZpcnN0TmFtZUNlbGwuc3R5bGUuYm9yZGVyID0gJzFweCBzb2xpZCAjZGRkJztcbiAgICBmaXJzdE5hbWVDZWxsLnN0eWxlLnBhZGRpbmcgPSAnOHB4JztcblxuICAgIGNvbnN0IGxvY2F0aW9uQ2VsbDogSFRNTFRhYmxlQ2VsbEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZCcpO1xuICAgIGxvY2F0aW9uQ2VsbC50ZXh0Q29udGVudCA9IHN0dWRlbnQubG9jYXRpb247XG4gICAgbG9jYXRpb25DZWxsLnN0eWxlLmJvcmRlciA9ICcxcHggc29saWQgI2RkZCc7XG4gICAgbG9jYXRpb25DZWxsLnN0eWxlLnBhZGRpbmcgPSAnOHB4JztcblxuICAgIHJvdy5hcHBlbmRDaGlsZChmaXJzdE5hbWVDZWxsKTtcbiAgICByb3cuYXBwZW5kQ2hpbGQobG9jYXRpb25DZWxsKTtcbiAgICB0Ym9keS5hcHBlbmRDaGlsZChyb3cpO1xuICB9KTtcblxuICB0YWJsZS5hcHBlbmRDaGlsZCh0Ym9keSk7XG5cbiAgLy8gQXBwZW5kIHRhYmxlIHRvIHRoZSBkb2N1bWVudCBib2R5XG4gIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodGFibGUpO1xufVxuXG4vLyBXYWl0IGZvciBET00gdG8gYmUgbG9hZGVkIGJlZm9yZSByZW5kZXJpbmdcbmlmIChkb2N1bWVudC5yZWFkeVN0YXRlID09PSAnbG9hZGluZycpIHtcbiAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIHJlbmRlclRhYmxlKTtcbn0gZWxzZSB7XG4gIHJlbmRlclRhYmxlKCk7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=